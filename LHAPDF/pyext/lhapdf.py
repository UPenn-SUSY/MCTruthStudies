# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _lhapdf
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _lhapdf.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _lhapdf.PySwigIterator_value(*args)
    def incr(*args): return _lhapdf.PySwigIterator_incr(*args)
    def decr(*args): return _lhapdf.PySwigIterator_decr(*args)
    def distance(*args): return _lhapdf.PySwigIterator_distance(*args)
    def equal(*args): return _lhapdf.PySwigIterator_equal(*args)
    def copy(*args): return _lhapdf.PySwigIterator_copy(*args)
    def next(*args): return _lhapdf.PySwigIterator_next(*args)
    def previous(*args): return _lhapdf.PySwigIterator_previous(*args)
    def advance(*args): return _lhapdf.PySwigIterator_advance(*args)
    def __eq__(*args): return _lhapdf.PySwigIterator___eq__(*args)
    def __ne__(*args): return _lhapdf.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _lhapdf.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _lhapdf.PySwigIterator___isub__(*args)
    def __add__(*args): return _lhapdf.PySwigIterator___add__(*args)
    def __sub__(*args): return _lhapdf.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _lhapdf.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class PDFSetInfoList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFSetInfoList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFSetInfoList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _lhapdf.PDFSetInfoList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _lhapdf.PDFSetInfoList___nonzero__(*args)
    def __len__(*args): return _lhapdf.PDFSetInfoList___len__(*args)
    def pop(*args): return _lhapdf.PDFSetInfoList_pop(*args)
    def __getslice__(*args): return _lhapdf.PDFSetInfoList___getslice__(*args)
    def __setslice__(*args): return _lhapdf.PDFSetInfoList___setslice__(*args)
    def __delslice__(*args): return _lhapdf.PDFSetInfoList___delslice__(*args)
    def __delitem__(*args): return _lhapdf.PDFSetInfoList___delitem__(*args)
    def __getitem__(*args): return _lhapdf.PDFSetInfoList___getitem__(*args)
    def __setitem__(*args): return _lhapdf.PDFSetInfoList___setitem__(*args)
    def append(*args): return _lhapdf.PDFSetInfoList_append(*args)
    def empty(*args): return _lhapdf.PDFSetInfoList_empty(*args)
    def size(*args): return _lhapdf.PDFSetInfoList_size(*args)
    def clear(*args): return _lhapdf.PDFSetInfoList_clear(*args)
    def swap(*args): return _lhapdf.PDFSetInfoList_swap(*args)
    def get_allocator(*args): return _lhapdf.PDFSetInfoList_get_allocator(*args)
    def begin(*args): return _lhapdf.PDFSetInfoList_begin(*args)
    def end(*args): return _lhapdf.PDFSetInfoList_end(*args)
    def rbegin(*args): return _lhapdf.PDFSetInfoList_rbegin(*args)
    def rend(*args): return _lhapdf.PDFSetInfoList_rend(*args)
    def pop_back(*args): return _lhapdf.PDFSetInfoList_pop_back(*args)
    def erase(*args): return _lhapdf.PDFSetInfoList_erase(*args)
    def __init__(self, *args): 
        this = _lhapdf.new_PDFSetInfoList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _lhapdf.PDFSetInfoList_push_back(*args)
    def front(*args): return _lhapdf.PDFSetInfoList_front(*args)
    def back(*args): return _lhapdf.PDFSetInfoList_back(*args)
    def assign(*args): return _lhapdf.PDFSetInfoList_assign(*args)
    def resize(*args): return _lhapdf.PDFSetInfoList_resize(*args)
    def insert(*args): return _lhapdf.PDFSetInfoList_insert(*args)
    def reserve(*args): return _lhapdf.PDFSetInfoList_reserve(*args)
    def capacity(*args): return _lhapdf.PDFSetInfoList_capacity(*args)
    __swig_destroy__ = _lhapdf.delete_PDFSetInfoList
    __del__ = lambda self : None;
PDFSetInfoList_swigregister = _lhapdf.PDFSetInfoList_swigregister
PDFSetInfoList_swigregister(PDFSetInfoList)

class FloatList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatList, name)
    __repr__ = _swig_repr
    def iterator(*args): return _lhapdf.FloatList_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _lhapdf.FloatList___nonzero__(*args)
    def __len__(*args): return _lhapdf.FloatList___len__(*args)
    def pop(*args): return _lhapdf.FloatList_pop(*args)
    def __getslice__(*args): return _lhapdf.FloatList___getslice__(*args)
    def __setslice__(*args): return _lhapdf.FloatList___setslice__(*args)
    def __delslice__(*args): return _lhapdf.FloatList___delslice__(*args)
    def __delitem__(*args): return _lhapdf.FloatList___delitem__(*args)
    def __getitem__(*args): return _lhapdf.FloatList___getitem__(*args)
    def __setitem__(*args): return _lhapdf.FloatList___setitem__(*args)
    def append(*args): return _lhapdf.FloatList_append(*args)
    def empty(*args): return _lhapdf.FloatList_empty(*args)
    def size(*args): return _lhapdf.FloatList_size(*args)
    def clear(*args): return _lhapdf.FloatList_clear(*args)
    def swap(*args): return _lhapdf.FloatList_swap(*args)
    def get_allocator(*args): return _lhapdf.FloatList_get_allocator(*args)
    def begin(*args): return _lhapdf.FloatList_begin(*args)
    def end(*args): return _lhapdf.FloatList_end(*args)
    def rbegin(*args): return _lhapdf.FloatList_rbegin(*args)
    def rend(*args): return _lhapdf.FloatList_rend(*args)
    def pop_back(*args): return _lhapdf.FloatList_pop_back(*args)
    def erase(*args): return _lhapdf.FloatList_erase(*args)
    def __init__(self, *args): 
        this = _lhapdf.new_FloatList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _lhapdf.FloatList_push_back(*args)
    def front(*args): return _lhapdf.FloatList_front(*args)
    def back(*args): return _lhapdf.FloatList_back(*args)
    def assign(*args): return _lhapdf.FloatList_assign(*args)
    def resize(*args): return _lhapdf.FloatList_resize(*args)
    def insert(*args): return _lhapdf.FloatList_insert(*args)
    def reserve(*args): return _lhapdf.FloatList_reserve(*args)
    def capacity(*args): return _lhapdf.FloatList_capacity(*args)
    __swig_destroy__ = _lhapdf.delete_FloatList
    __del__ = lambda self : None;
FloatList_swigregister = _lhapdf.FloatList_swigregister
FloatList_swigregister(FloatList)

TBAR = _lhapdf.TBAR
BBAR = _lhapdf.BBAR
CBAR = _lhapdf.CBAR
SBAR = _lhapdf.SBAR
UBAR = _lhapdf.UBAR
DBAR = _lhapdf.DBAR
GLUON = _lhapdf.GLUON
DOWN = _lhapdf.DOWN
UP = _lhapdf.UP
STRANGE = _lhapdf.STRANGE
CHARM = _lhapdf.CHARM
BOTTOM = _lhapdf.BOTTOM
TOP = _lhapdf.TOP
PHOTON = _lhapdf.PHOTON
SILENT = _lhapdf.SILENT
LOWKEY = _lhapdf.LOWKEY
DEFAULT = _lhapdf.DEFAULT
getVersion = _lhapdf.getVersion
initLHAPDF = _lhapdf.initLHAPDF
setVerbosity = _lhapdf.setVerbosity
setPDFPath = _lhapdf.setPDFPath
setParameter = _lhapdf.setParameter
class PDFSetInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDFSetInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDFSetInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _lhapdf.PDFSetInfo_file_set
    __swig_getmethods__["file"] = _lhapdf.PDFSetInfo_file_get
    if _newclass:file = _swig_property(_lhapdf.PDFSetInfo_file_get, _lhapdf.PDFSetInfo_file_set)
    __swig_setmethods__["description"] = _lhapdf.PDFSetInfo_description_set
    __swig_getmethods__["description"] = _lhapdf.PDFSetInfo_description_get
    if _newclass:description = _swig_property(_lhapdf.PDFSetInfo_description_get, _lhapdf.PDFSetInfo_description_set)
    __swig_setmethods__["id"] = _lhapdf.PDFSetInfo_id_set
    __swig_getmethods__["id"] = _lhapdf.PDFSetInfo_id_get
    if _newclass:id = _swig_property(_lhapdf.PDFSetInfo_id_get, _lhapdf.PDFSetInfo_id_set)
    __swig_setmethods__["pdflibNType"] = _lhapdf.PDFSetInfo_pdflibNType_set
    __swig_getmethods__["pdflibNType"] = _lhapdf.PDFSetInfo_pdflibNType_get
    if _newclass:pdflibNType = _swig_property(_lhapdf.PDFSetInfo_pdflibNType_get, _lhapdf.PDFSetInfo_pdflibNType_set)
    __swig_setmethods__["pdflibNGroup"] = _lhapdf.PDFSetInfo_pdflibNGroup_set
    __swig_getmethods__["pdflibNGroup"] = _lhapdf.PDFSetInfo_pdflibNGroup_get
    if _newclass:pdflibNGroup = _swig_property(_lhapdf.PDFSetInfo_pdflibNGroup_get, _lhapdf.PDFSetInfo_pdflibNGroup_set)
    __swig_setmethods__["pdflibNSet"] = _lhapdf.PDFSetInfo_pdflibNSet_set
    __swig_getmethods__["pdflibNSet"] = _lhapdf.PDFSetInfo_pdflibNSet_get
    if _newclass:pdflibNSet = _swig_property(_lhapdf.PDFSetInfo_pdflibNSet_get, _lhapdf.PDFSetInfo_pdflibNSet_set)
    __swig_setmethods__["memberId"] = _lhapdf.PDFSetInfo_memberId_set
    __swig_getmethods__["memberId"] = _lhapdf.PDFSetInfo_memberId_get
    if _newclass:memberId = _swig_property(_lhapdf.PDFSetInfo_memberId_get, _lhapdf.PDFSetInfo_memberId_set)
    __swig_setmethods__["lowx"] = _lhapdf.PDFSetInfo_lowx_set
    __swig_getmethods__["lowx"] = _lhapdf.PDFSetInfo_lowx_get
    if _newclass:lowx = _swig_property(_lhapdf.PDFSetInfo_lowx_get, _lhapdf.PDFSetInfo_lowx_set)
    __swig_setmethods__["highx"] = _lhapdf.PDFSetInfo_highx_set
    __swig_getmethods__["highx"] = _lhapdf.PDFSetInfo_highx_get
    if _newclass:highx = _swig_property(_lhapdf.PDFSetInfo_highx_get, _lhapdf.PDFSetInfo_highx_set)
    __swig_setmethods__["lowQ2"] = _lhapdf.PDFSetInfo_lowQ2_set
    __swig_getmethods__["lowQ2"] = _lhapdf.PDFSetInfo_lowQ2_get
    if _newclass:lowQ2 = _swig_property(_lhapdf.PDFSetInfo_lowQ2_get, _lhapdf.PDFSetInfo_lowQ2_set)
    __swig_setmethods__["highQ2"] = _lhapdf.PDFSetInfo_highQ2_set
    __swig_getmethods__["highQ2"] = _lhapdf.PDFSetInfo_highQ2_get
    if _newclass:highQ2 = _swig_property(_lhapdf.PDFSetInfo_highQ2_get, _lhapdf.PDFSetInfo_highQ2_set)
    def toString(*args): return _lhapdf.PDFSetInfo_toString(*args)
    def __str__(*args): return _lhapdf.PDFSetInfo___str__(*args)
    def __init__(self, *args): 
        this = _lhapdf.new_PDFSetInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lhapdf.delete_PDFSetInfo
    __del__ = lambda self : None;
PDFSetInfo_swigregister = _lhapdf.PDFSetInfo_swigregister
PDFSetInfo_swigregister(PDFSetInfo)
extrapolate = _lhapdf.extrapolate

__lshift__ = _lhapdf.__lshift__
getAllPDFSetInfo = _lhapdf.getAllPDFSetInfo
prefixPath = _lhapdf.prefixPath
pdfsetsPath = _lhapdf.pdfsetsPath
pdfsetsIndexPath = _lhapdf.pdfsetsIndexPath
hasPhoton = _lhapdf.hasPhoton

getPDFSetInfo = _lhapdf.getPDFSetInfo
initPDFSet = _lhapdf.initPDFSet
usePDFMember = _lhapdf.usePDFMember
getDescription = _lhapdf.getDescription
numberPDF = _lhapdf.numberPDF
alphasPDF = _lhapdf.alphasPDF
getOrderPDF = _lhapdf.getOrderPDF
getOrderAlphaS = _lhapdf.getOrderAlphaS
getQMass = _lhapdf.getQMass
getThreshold = _lhapdf.getThreshold
getNf = _lhapdf.getNf
getLam4 = _lhapdf.getLam4
getLam5 = _lhapdf.getLam5
getXmin = _lhapdf.getXmin
getXmax = _lhapdf.getXmax
getQ2min = _lhapdf.getQ2min
getQ2max = _lhapdf.getQ2max
xfx = _lhapdf.xfx
xfxp = _lhapdf.xfxp
xfxa = _lhapdf.xfxa
xfxphoton = _lhapdf.xfxphoton
initPDFSetByName = _lhapdf.initPDFSetByName
initPDF = _lhapdf.initPDF
initPDFByName = _lhapdf.initPDFByName

